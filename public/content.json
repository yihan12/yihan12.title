[{"title":"Js去除字符串中的中括号","date":"2019-08-12T05:16:12.000Z","path":"2019/08/12/Js去除字符串中的中括号/","text":"12345var str = '这是一个字符串[html]语句;[html]字符串很常见';&lt;br&gt;alert(str.replace(/\\[|]/g,''));//移除字符串中的所有[]括号（不包括其内容）//输出：这是一个字符串html语句;html字符串很常见&lt;br&gt;alert(str.replace(/\\[.*?\\]/g,''));//移除字符串中的所有[]括号（包括其内容）//输出：这是一个字符串语句;字符串很常见 移除所有中括号,不包括其内容123let str = \"[1,2,3,4,5,6,7,8]\";let newStr = str.replace(/\\[|]/g,'');console.log(newStr);//1,2,3,4,5,6,7,8 移除所有中括号,包括其内容123let str = \"[1,2,3,4,5,6,7,8]\";let newStr = str.replace(/\\[.*?\\]/g,'');console.log(newStr);//'' 正则表达式符号释义“&quot;：将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“n”匹配字符“n”。“\\n”匹配一个换行符。串行“\\”匹配“\\”而“(”则匹配“(”； “|”：或的意思； “/g”：全局搜索。由于此处要去除字符串中所有中括号，因此正则中要开启全局搜索； “.”：表示除换行符和其他Unicode行终止符之外的任意字符； “*”：匹配前面的子表达式零次或多次。例如，zo能匹配“z”以及“zoo”。等价于{0,}； “?”：匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“does”或“does”中的“do”。?等价于{0,1}。（贪婪模式） 更多正则表达式符号解释请看这里：JS正则表达式 总结当然还有很多方法能解决,正则是最清楚最清晰明了的方式.","comments":true,"tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"正则","slug":"正则","permalink":"http://yoursite.com/tags/正则/"}]},{"title":"IOS微信分享问题","date":"2019-08-09T03:16:29.000Z","path":"2019/08/09/tags/","text":"之前一个vue项目遇到的问题:微信分享在安卓上没问题,但是到了IOS就会分享报错;主要问题是:Vue的push跳转,在IOS端会只跳转页面,地址栏的导航不会发生变化;而微信分享的js-sdk必须签名地址和页面地址必须一致才能分享成功.网上方法差不多都看了，有个解决方法：window.location.href,确实有效，但是必须进入页面后再次刷新页面才能签名成功,但是这样的话,会导致页面的所有数据会重新加载影响用户体验. 区分安卓和IOS端,并做出不同的处理123456789101112window.router=router;router.afterEach(to =&gt; &#123; const u = navigator.userAgent.toLowerCase(); if ( u.indexOf(\"like mac os x\") &lt; 0 || u.match(/MicroMessenger/i) != \"micromessenger\" ) return; if (to.path !== global.location.pathname) &#123; location.assign(to.fullPath); &#125;&#125;); 总结亲测window.location.href是有用但是需要再次刷新页面才会签名成功，！window.location.href刚跳转进去是不能签名成功的；改变全局路由守卫后置钩子就不需要改变push的切换页面方式，当它是ios端的时候会主动改变的url。还有window.location.href有个跳转效果不好，还会重新获取数据.","comments":true,"tags":[{"name":"js-sdk","slug":"js-sdk","permalink":"http://yoursite.com/tags/js-sdk/"},{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"}]},{"title":"vue-devtool  chrome插件下载","date":"2019-08-08T09:41:36.000Z","path":"2019/08/08/vue-Devtool-0/","text":"网上关于vue-devtools的安装数不胜数，但是自己操作起来却总是遇到问题。写下这篇随笔，以防以后忘记。vue-devtools是一款基于chrome游览器的插件，用于调试vue应用，这可以极大地提高我们的调试效率。当然网上教程确实多，很容易理解，但是新手操作实在会卡住。这里介绍一篇，大家可以去看看https://blog.csdn.net/zhousenshan/article/details/81583798我这里写下我安装的全过程，以及走过的弯路，及解决办法。下载推荐用npm和cnpm,下面也顺便讲了npm和cnpm下载。 具体的可参照这篇博文:https://segmentfault.com/a/1190000018430855","comments":true,"tags":[]},{"title":"js判断文件名是否合法","date":"2019-08-07T09:25:37.000Z","path":"2019/08/07/title1/","text":"文件类型可查询MIME参考手册. 获取文件后缀名12345678/** * @description 获取文件后缀名 * @param &#123;String&#125; fileName 文件全名，包含后缀名的那种 */export function getFileExt(fileName) &#123; var splits = fileName.split('.'); return _.last(splits);&#125; 检查文件类型 123456789101112131415161718192021222324252627282930/** * @description 检查文件类型，是否是合法的，这里的validMIMEList仅写了部分，如果需要支持更多，请查询MIME参考手册，增加更多的MIME类型进来 * @param &#123;Object&#125; file 文件对象 * @param &#123;String&#125; exts 文件合法类型，格式：doc|docx|png */export function checkFileType(file, exts) &#123; var validMIMEList = [ // doc 'application/msword', // xls 'application/vnd.ms-excel', // docx 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', // xlsx 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // pdf 'application/pdf', // rar 'application/x-rar-compressed', // zip 'application/zip' ]; var validExts = exts.split('|'); var fileExt = getFileExt(file.name); if (_.includes(validMIMEList, file.type) || _.includes(validExts, fileExt)) &#123; return true; &#125; else &#123; return false; &#125;&#125;","comments":true,"tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"type","slug":"type","permalink":"http://yoursite.com/tags/type/"}]},{"title":"普通下载  &&  Vue文件图片下载处理","date":"2019-08-07T08:55:21.000Z","path":"2019/08/07/title/","text":"一般的下载,也就a标签加个链接地址,标签内加个download属性. 当地址是后端提供时:可通过创建a标签,随即给a便签附下载链接,文件名和属性,最后再创建点击效果,最后清楚生成的a标签. 再则是图片地址提供:可以通过Base64加canvas,对图片的下载可以进行处理. 下面就是相关方法处理函数 HTML与文件下载1&lt;a href=\"large.jpg\" download&gt;下载&lt;/a&gt; 文件下载配合后端表格导出 1234567891011121314export function downloadFile(url, filename) &#123; // 创建隐藏的可下载链接 var link = document.createElement('a'); link.href = url; link.download = filename; link.target = '_blank'; link.style.display = 'none'; document.body.appendChild(link); // 触发点击 link.click(); // 然后移除 document.body.removeChild(link); link = null;&#125; 加参数: 123456789101112export function generateQS(baseurl, paramObj) &#123; var returnUrl = baseurl + '?' for (const key in paramObj) &#123; // Object.hasOwnProperty(prop)用来判断对象是否含有指定属性 // 返回值boolean if (paramObj.hasOwnProperty(key)) &#123; const element = paramObj[key]; returnUrl += key + '=' + element + '&amp;'; &#125; &#125; return returnUrl;&#125; 借助HTML5 Blob实现文本信息文件下载1234567891011121314var funDownload = function (content, filename) &#123; // 创建隐藏的可下载链接 var eleLink = document.createElement('a'); eleLink.download = filename; eleLink.style.display = 'none'; // 字符内容转变成blob地址 var blob = new Blob([content]); eleLink.href = URL.createObjectURL(blob); // 触发点击 document.body.appendChild(eleLink); eleLink.click(); // 然后移除 document.body.removeChild(eleLink);&#125;; 借助Base64实现任意文件下载12345678910111213141516171819var funDownload = function (domImg, filename) &#123; // 创建隐藏的可下载链接 var eleLink = document.createElement('a'); eleLink.download = filename; eleLink.style.display = 'none'; // 图片转base64地址 var canvas = document.createElement('canvas'); var context = canvas.getContext('2d'); var width = domImg.naturalWidth; var height = domImg.naturalHeight; context.drawImage(domImg, 0, 0); // 如果是PNG图片，则canvas.toDataURL('image/png') eleLink.href = canvas.toDataURL('image/jpeg'); // 触发点击 document.body.appendChild(eleLink); eleLink.click(); // 然后移除 document.body.removeChild(eleLink);&#125;; 结束语在Chrome浏览器下，模拟点击创建的a元素即使不append到页面中，也是可以触发下载的，但是在Firefox浏览器中却不行，因此，上面的funDownload()方法有一个appendChild和removeChild的处理，就是为了兼容Firefox浏览器。","comments":true,"tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"下载","slug":"下载","permalink":"http://yoursite.com/tags/下载/"}]}]